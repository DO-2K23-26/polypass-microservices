// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     credential.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CredentialEvent struct {
	Credential_id string `json:"credential_id"`

	Credential_name string `json:"credential_name"`

	Folder_id string `json:"folder_id"`
}

const CredentialEventAvroCRC64Fingerprint = "\xa2`\xf3\xfb\xfb\xfe\xc1\x17"

func NewCredentialEvent() CredentialEvent {
	r := CredentialEvent{}
	r.Credential_id = "default-credential-id"
	r.Credential_name = "default-credential-name"
	r.Folder_id = ""
	return r
}

func DeserializeCredentialEvent(r io.Reader) (CredentialEvent, error) {
	t := NewCredentialEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCredentialEventFromSchema(r io.Reader, schema string) (CredentialEvent, error) {
	t := NewCredentialEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCredentialEvent(r CredentialEvent, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Credential_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Credential_name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Folder_id, w)
	if err != nil {
		return err
	}
	return err
}

func (r CredentialEvent) Serialize(w io.Writer) error {
	return writeCredentialEvent(r, w)
}

func (r CredentialEvent) Schema() string {
	return "{\"fields\":[{\"default\":\"default-credential-id\",\"name\":\"credential_id\",\"type\":\"string\"},{\"default\":\"default-credential-name\",\"name\":\"credential_name\",\"type\":\"string\"},{\"default\":\"\",\"name\":\"folder_id\",\"type\":\"string\"}],\"name\":\"com.example.CredentialEvent\",\"type\":\"record\"}"
}

func (r CredentialEvent) SchemaName() string {
	return "com.example.CredentialEvent"
}

func (_ CredentialEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CredentialEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CredentialEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CredentialEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CredentialEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CredentialEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CredentialEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ CredentialEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CredentialEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Credential_id}

		return w

	case 1:
		w := types.String{Target: &r.Credential_name}

		return w

	case 2:
		w := types.String{Target: &r.Folder_id}

		return w

	}
	panic("Unknown field index")
}

func (r *CredentialEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.Credential_id = "default-credential-id"
		return
	case 1:
		r.Credential_name = "default-credential-name"
		return
	case 2:
		r.Folder_id = ""
		return
	}
	panic("Unknown field index")
}

func (r *CredentialEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ CredentialEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CredentialEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CredentialEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ CredentialEvent) Finalize()                        {}

func (_ CredentialEvent) AvroCRC64Fingerprint() []byte {
	return []byte(CredentialEventAvroCRC64Fingerprint)
}

func (r CredentialEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["credential_id"], err = json.Marshal(r.Credential_id)
	if err != nil {
		return nil, err
	}
	output["credential_name"], err = json.Marshal(r.Credential_name)
	if err != nil {
		return nil, err
	}
	output["folder_id"], err = json.Marshal(r.Folder_id)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CredentialEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["credential_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Credential_id); err != nil {
			return err
		}
	} else {
		r.Credential_id = "default-credential-id"
	}
	val = func() json.RawMessage {
		if v, ok := fields["credential_name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Credential_name); err != nil {
			return err
		}
	} else {
		r.Credential_name = "default-credential-name"
	}
	val = func() json.RawMessage {
		if v, ok := fields["folder_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Folder_id); err != nil {
			return err
		}
	} else {
		r.Folder_id = ""
	}
	return nil
}
