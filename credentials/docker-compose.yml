version: '3.8'

services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: credentials
    ports:
      - 5432:5432
    volumes:
      - credential-db-vol:/var/lib/postgresql/data
    networks:
      - elk
  broker-1:
    image: apache/kafka:latest
    container_name: broker-1
    restart: unless-stopped
    ports:
      - "19092:9092"
    environment:
      # Shared setup
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          "CMD",
          "/opt/kafka/bin/kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elk

  broker-2:
    image: apache/kafka:latest
    container_name: broker-2
    restart: unless-stopped
    ports:
      - "29092:9092"
    environment:
      # Shared setup
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker-1:9093,2@broker-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          "CMD",
          "/opt/kafka/bin/kafka-topics.sh",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elk

  akhq:
    image: tchiotludo/akhq:latest
    container_name: akhq
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker-1:19092,broker-2:19092"
              schema-registry:
                url: "http://schema-registry:8085"
    networks:
      - elk

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    ports:
      - 8085:8085
    depends_on:
      - broker-1
      - broker-2
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://broker-1:19092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
    networks:
      - elk

  create-data-dir:
    image: busybox
    command: mkdir -p /data
    volumes:
      - ${HOME}/minio/data:/data

  kafka-init:
    image: apache/kafka:latest
    depends_on:
      - broker-1
      - broker-2
    environment:
      BOOTSTRAP_SERVERS: broker-1:19092
    entrypoint: >
      bash -c '
        echo "Waiting for Kafka to be ready...";
        for i in {1..30}; do
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker-1:19092 --list && break || sleep 2;
        done;
        echo "Creating topics...";
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic creds-creation --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic creds-update --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic creds-read --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server broker-1:19092 --topic creds-delete --partitions 1 --replication-factor 1 &&
        echo "Kafka initialization complete.";'
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
  credential-db-vol: