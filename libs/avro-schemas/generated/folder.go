// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     deleted.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Folder struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

const FolderAvroCRC64Fingerprint = "\xc0Q\xf7\a\x80ZÖ¢"

func NewFolder() Folder {
	r := Folder{}
	r.Id = "default-id"
	r.Name = "default-name"
	return r
}

func DeserializeFolder(r io.Reader) (Folder, error) {
	t := NewFolder()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFolderFromSchema(r io.Reader, schema string) (Folder, error) {
	t := NewFolder()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFolder(r Folder, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r Folder) Serialize(w io.Writer) error {
	return writeFolder(r, w)
}

func (r Folder) Schema() string {
	return "{\"fields\":[{\"default\":\"default-id\",\"name\":\"id\",\"type\":\"string\"},{\"default\":\"default-name\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"com.example.Folder\",\"type\":\"record\"}"
}

func (r Folder) SchemaName() string {
	return "com.example.Folder"
}

func (_ Folder) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Folder) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Folder) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Folder) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Folder) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Folder) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Folder) SetString(v string)   { panic("Unsupported operation") }
func (_ Folder) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Folder) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	}
	panic("Unknown field index")
}

func (r *Folder) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = "default-id"
		return
	case 1:
		r.Name = "default-name"
		return
	}
	panic("Unknown field index")
}

func (r *Folder) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Folder) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Folder) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Folder) HintSize(int)                     { panic("Unsupported operation") }
func (_ Folder) Finalize()                        {}

func (_ Folder) AvroCRC64Fingerprint() []byte {
	return []byte(FolderAvroCRC64Fingerprint)
}

func (r Folder) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Folder) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = "default-id"
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = "default-name"
	}
	return nil
}
