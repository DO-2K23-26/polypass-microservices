package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	model1 "github.com/DO-2K23-26/polypass-microservices/gateway/graph/model"
	"github.com/optique-dev/optique"
)

// Parent is the resolver for the parent field.
func (r *folderResolver) Parent(ctx context.Context, obj *model1.Folder) (*model1.Folder, error) {
	folder, err := r.OrganizationsService.GetFolder(obj.ID)
	if err != nil {
		return nil, err
	}
	return FolderToModel(&folder), nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *folderResolver) CreatedBy(ctx context.Context, obj *model1.Folder) (*model1.User, error) {
	folder, err := r.OrganizationsService.GetFolder(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model1.User{
		ID: folder.CreatedBy,
		Username: "jul",
		Email: "jul@gmail.com",
	}, nil
}

// Members is the resolver for the members field.
func (r *folderResolver) Members(ctx context.Context, obj *model1.Folder) ([]*model1.User, error) {
	folder, err := r.OrganizationsService.GetFolder(obj.ID)

	if err != nil {
		return nil, err
	}
	members := make([]*model1.User, len(folder.Members))
	for i, member := range folder.Members {
		members[i] = &model1.User{
			ID: member,
			Username: "jul",
			Email: "jul@gmail.com",
		}
	}
	return members, nil
}

// Tags is the resolver for the tags field.
func (r *folderResolver) Tags(ctx context.Context, obj *model1.Folder) ([]*model1.Tag, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, newFolder model1.NewFolder) (*model1.Folder, error) {
	panic(fmt.Errorf("not implemented: CreateFolder - createFolder"))
}

// Credentials is the resolver for the credentials field.
func (r *queryResolver) Credentials(ctx context.Context) ([]model1.Credential, error) {
	panic(fmt.Errorf("not implemented: Credentials - credentials"))
}

// Folders is the resolver for the folders field.
func (r *queryResolver) Folders(ctx context.Context) ([]*model1.Folder, error) {
	folders, err := r.OrganizationsService.GetFolders()
	optique.Info(fmt.Sprintf("GetFolders: %v", folders))
	graphql_folders := make([]*model1.Folder, 0)
	if err != nil {
		optique.Error(err.Error())
		return nil, err
	}
	for _, folder := range folders {
		graphql_folders = append(graphql_folders, FolderToModel(&folder))
	}
	optique.Info(fmt.Sprintf("graphql_folders: %v", graphql_folders))
	return graphql_folders, nil
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*model1.Tag, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Folder is the resolver for the folder field.
func (r *tagResolver) Folder(ctx context.Context, obj *model1.Tag) (*model1.Folder, error) {
	panic(fmt.Errorf("not implemented: Folder - folder"))
}

// CreatedBy is the resolver for the createdBy field.
func (r *tagResolver) CreatedBy(ctx context.Context, obj *model1.Tag) (*model1.User, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - createdBy"))
}

// Folder returns FolderResolver implementation.
func (r *Resolver) Folder() FolderResolver { return &folderResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Tag returns TagResolver implementation.
func (r *Resolver) Tag() TagResolver { return &tagResolver{r} }

type folderResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
